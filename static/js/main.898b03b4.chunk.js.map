{"version":3,"sources":["Components/Player.js","Components/Card.js","Components/Deck.js","Components/Header.js","Components/MainMenu.js","Components/PlayerSeat.js","App.js","index.js"],"names":["Player","playerName","type","key","this","props","cards","statusMessage","status","currentPlayer","score","numberOfA","i","length","val","value","parseInt","card","push","determineStatusMessage","newStatus","Card","useState","suit","setSuit","setValue","useEffect","className","Deck","generateDeck","shuffle","newIndex","Math","floor","random","oldValue","Values","flatMap","map","Header","onClick","onMenuClick","players","MainMenu","player","playerNames","setPlayerNames","newPlayer","setNewPlayer","inputRef","React","createRef","addPlayerName","newPlayerNames","current","focus","onNewGame","disabled","onSubmit","placeholder","onChange","event","target","ref","style","textAlign","index","indexToRemove","filter","removePlayerName","PlayerSeat","setPlayers","forEach","document","getElementById","scrollIntoView","behavior","renderPlayers","labelClass","id","onHitMe","onStand","tempPlayers","finalPlayers","App","dealer","setDealer","setStatus","deck","setDeck","drawCard","newDeck","cardToReturn","pop","newGame","newPlayers","newDealer","addDeck","hit","ret","nextPlayer","hitMe","stand","nextPlayerId","pPlayers","pDealer","pDeck","playDealer","ReactDOM","render","StrictMode"],"mappings":"kPAAqBA,E,WACnB,WAAYC,EAAYC,EAAMC,GAAM,oBAClCC,KAAKC,MAAQ,CACXF,IAAKA,EACLF,WAAYA,EACZK,MAAO,GACPJ,KAAMA,EACNK,cAAe,IACfC,OAAQ,IACRC,eAAe,G,qCAInB,WACE,OAAOL,KAAKC,MAAMF,M,iBAEpB,WACE,OAAOC,KAAKC,MAAMC,Q,iBAGpB,WAGE,IAFA,IAAII,EAAQ,EACRC,EAAY,EACPC,EAAI,EAAGA,EAAIR,KAAKE,MAAMO,OAAQD,IAAK,CAC1C,IAAIE,EAAM,EACV,OAAQV,KAAKE,MAAMM,GAAGG,OACpB,IAAK,IACHD,EAAM,GACNH,IACA,MACF,IAAK,IAGL,IAAK,IAGL,IAAK,IACHG,EAAM,GACN,MACF,QACEA,EAAME,SAASZ,KAAKE,MAAMM,GAAGG,OAEjCL,GAASI,EAEX,GAAIJ,EAAQ,GACV,KAAOA,EAAQ,IAAMC,EAAY,GAC/BD,GAAgB,GAChBC,IAGJ,OAAOD,I,sBAET,WACE,OAAON,KAAKC,MAAMJ,a,gBAEpB,WACE,OAAOG,KAAKC,MAAMH,O,kBAEpB,WACE,OAAOE,KAAKC,MAAMG,Q,IAQpB,SAAWA,GACTJ,KAAKC,MAAMG,OAASA,I,yBAPtB,WACE,OAAOJ,KAAKC,MAAME,e,IAQpB,SAAkBA,GAChBH,KAAKC,MAAME,cAAgBA,I,yBAP7B,WACE,OAAOH,KAAKC,MAAMI,e,IAQpB,SAAkBA,GAChBL,KAAKC,MAAMI,cAAgBA,I,iBAG7B,SAAIQ,GACFb,KAAKE,MAAMY,KAAKD,GAChBb,KAAKG,cAAgBH,KAAKe,2B,mBAE5B,WACEf,KAAKG,cAAgB,QACrBH,KAAKI,OAAS,M,oCAGhB,WACE,IACIY,EADAV,EAAQN,KAAKM,MAejB,OAbIA,EAAQ,IACVU,EAAY,kBACZhB,KAAKI,OAAS,KACK,KAAVE,GACTU,EAAY,MACZhB,KAAKI,OAAS,KACLE,EAAQ,IAAMN,KAAKE,MAAMO,QAAU,GAC5CO,EAAY,+CACZhB,KAAKI,OAAS,MAEdY,EAAY,IACZhB,KAAKI,OAAS,KAETY,M,YCrGI,SAASC,EAAKhB,GAAQ,IAAD,EACZiB,mBAASjB,EAAMkB,MADH,mBAC7BA,EAD6B,KACvBC,EADuB,OAEVF,mBAASjB,EAAMU,OAFL,mBAE7BA,EAF6B,KAEtBU,EAFsB,KAgBlC,OAXAC,qBAAU,WACJrB,EAAMkB,OAASA,GACjBC,EAAQnB,EAAMkB,QAEf,CAAClB,EAAMkB,OAEVG,qBAAU,WACJrB,EAAMU,QAAUA,GAClBU,EAASpB,EAAMU,SAEhB,CAACV,EAAMU,QAER,qBACEY,UACGJ,GAASR,EAEG,WAATQ,GAAyB,WAATA,EAChB,iBACA,mBAHA,oBAHR,SASE,uBAAOI,UAAU,sBAAjB,SACE,kCACE,oBAAIA,UAAU,WAAd,SACE,6BAAKZ,MAEP,oBAAIY,UAAU,cAAd,SACE,6BAAKJ,MAEP,oBAAII,UAAU,cAAd,SACE,6BAAKZ,a,ICpCIa,E,WACnB,aAAe,oBACbxB,KAAKE,MAAQF,KAAKyB,eAClBzB,KAAK0B,U,2CAGP,WACE,IAAK,IAAIlB,EAAIR,KAAKE,MAAMO,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAE9C,IAAMmB,EAAWC,KAAKC,MAAMD,KAAKE,UAAYtB,EAAI,IAC3CuB,EAAW/B,KAAKE,MAAMyB,GAC5B3B,KAAKE,MAAMyB,GAAY3B,KAAKE,MAAMM,GAClCR,KAAKE,MAAMM,GAAKuB,K,0BAGpB,WACE,IACMC,EAAS,CACb,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KAEF,MAhBc,CAAC,SAAK,SAAK,SAAK,UAgBjBC,SAAQ,SAACd,GACpB,OAAOa,EAAOE,KAAI,SAACvB,GACjB,MAAO,CAAEQ,OAAMR,mB,KCjCR,SAASwB,EAAOlC,GAC7B,OACE,wBAAQsB,UAAU,yBAAlB,SACE,gCACE,wBAAQA,UAAU,WAAWa,QAASnC,EAAMoC,YAA5C,uBAGA,wBACEd,UAAU,WACVa,QAAS,kBAAMnC,EAAMmC,QAAQnC,EAAMqC,UAFrC,4BCPO,SAASC,EAAStC,GAAQ,IAAD,EACFiB,oBAAS,WAC3C,OAAIjB,EAAMqC,QACDrC,EAAMqC,QAAQJ,KAAI,SAACM,GACxB,OAAOA,EAAO3C,cAEN,MANwB,mBACjC4C,EADiC,KACpBC,EADoB,OAQNxB,mBAAS,IARH,mBAQjCyB,EARiC,KAQtBC,EARsB,KASlCC,EAAWC,IAAMC,YAMrB,SAASC,EAAcnD,GACrB,IAAIoD,EAAc,YAAOR,GACzBQ,EAAenC,KAAKjB,GACpB6C,EAAeO,GACfL,EAAa,IAkBf,OA1BAtB,qBAAU,WACRuB,EAASK,QAAQC,UAChB,CAACR,IAyBF,gCACE,yBAAQpB,UAAU,aAAlB,UACE,oBAAIA,UAAU,UAAd,uBACA,oBAAIA,UAAU,cAAd,mCACA,wBACEA,UAAU,YACVa,QAAS,kBAAMnC,EAAMmD,UAAUX,IAC/BY,SAAiC,IAAvBZ,EAAYhC,OAHxB,2BAQF,+BACE,uBAAOc,UAAU,YAAjB,SACE,gCACE,6BACE,+BACE,qBAAKA,UAAU,aAAf,SACE,uBAAM+B,SAAU,kBAAMN,EAAcL,IAApC,UACE,uBACEY,YAAY,kBACZC,SArCpB,SAAsBC,GACpBb,EAAaa,EAAMC,OAAO/C,QAqCRY,UAAU,eACVZ,MAAOgC,EACPgB,IAAKd,IAGP,wBACEtB,UAAU,UACVa,QAAS,kBAAMY,EAAcL,IAC7BU,UAAUV,EAHZ,sBASJ,oBAAIpB,UAAU,eAAd,qBACA,oBAAIA,UAAU,cAAd,SAC0B,IAAvBkB,EAAYhC,OACX,qBAAKmD,MAAO,CAAEC,UAAW,UAAzB,iCAIApB,EAAYP,KAAI,SAACrC,EAAYiE,GAC3B,OACE,+BACGjE,EACD,wBACE0B,UAAU,aACVa,QAAS,YA9DnC,SAA0B2B,GACxB,IAAId,EAAiBR,EAClBuB,QAAO,SAACnE,EAAYiE,GACnB,GAAIA,IAAUC,EACZ,OAAOlE,KAGVqC,KAAI,SAACrC,GACJ,OAAOA,KAEX6C,EAAeO,GAqDWgB,CAAiBH,IAHrB,qCCpFX,SAASI,EAAWjE,GAAQ,IAAD,EACZiB,mBAASjB,EAAMqC,SADH,mBACnCA,EADmC,KAC1B6B,EAD0B,KAIxC7C,qBAAU,WACJrB,EAAMqC,UAAYA,IACpB6B,EAAWlE,EAAMqC,SACjBrC,EAAMqC,QAAQ8B,SAAQ,SAAC5B,GACjBA,EAAOnC,eACTgE,SACGC,eADH,uBACkC9B,EAAOzC,MACtCwE,eAAe,CAAEC,SAAU,iBAInC,CAACvE,EAAMqC,UAEV,IAAImC,EAAgBnC,EAAQJ,KAAI,SAACM,EAAQsB,GACvC,IAAIY,EAAa,GAKjB,MAJsB,MAAlBlC,EAAOpC,OAAgBsE,EAAa,cACb,MAAlBlC,EAAOpC,OAAgBsE,EAAa,eAClB,MAAlBlC,EAAOpC,SAAgBsE,EAAa,aAG3C,sBAAKC,GAAE,uBAAkBnC,EAAOzC,KAAOwB,UAAU,eAAjD,UACE,sBAAKA,UAAWiB,EAAOnC,cAAgB,sBAAwB,OAA/D,UACmB,MAAhBmC,EAAO1C,KACN,sBAAKyB,UAAU,eAAf,UACGiB,EAAO3C,WACN2C,EAAOnC,cAAR,aAAqCmC,EAAOlC,OAApB,QAG3B,sBAAKiB,UAAS,uBAAkBmD,GAAhC,UACGlC,EAAO3C,WADV,MACyB2C,EAAOlC,MADhC,KACyC,IACb,MAAzBkC,EAAOrC,cAAwB,UAAYqC,EAAOrC,iBAGvD,qBAAKoB,UAAU,iBAAf,SACGiB,EAAOtC,MAAMgC,KAAI,SAACrB,EAAMiD,GACvB,MAAoB,MAAhBtB,EAAO1C,MAAiB0C,EAAOnC,eAA2B,IAAVyD,EAG3C,cAAC7C,EAAD,CAAME,KAAMN,EAAKM,KAAMR,MAAOE,EAAKF,QAFnC,cAACM,EAAD,YAOf,sBAAKM,UAA2B,MAAhBiB,EAAO1C,KAAe,SAAW,GAAjD,UACE,wBACEyB,UAAU,UACVa,QAAS,WACPnC,EAAM2E,QAAQpC,IAEhBa,UACEb,EAAOnC,eAAiC,MAAhBmC,EAAO1C,KANnC,qBAWA,wBACEyB,UAAU,YACVa,QAAS,WACPnC,EAAM4E,QAAQrC,IAEhBa,UACEb,EAAOnC,eAAiC,MAAhBmC,EAAO1C,KANnC,4BAeJgF,EAAc,GACdC,EAAe,GAUnB,OARAN,EAAcL,SAAQ,SAAC5B,EAAQsB,GAC7BgB,EAAYhE,KAAK,oBAAIS,UAAU,QAAd,SAAuBiB,MAEnCsB,EAAQ,GAAK,IAAM,GAAKA,IAAUW,EAAchE,OAAS,IAC5DsE,EAAajE,KAAK,oBAAIS,UAAU,aAAd,SAA4BuD,KAC9CA,EAAc,OAGXC,EC7EM,SAASC,IAAO,IAAD,EACA9D,mBAAS,IADT,mBACvBoB,EADuB,KACd6B,EADc,OAEFjD,mBAAS,IAFP,mBAEvB+D,EAFuB,KAEfC,EAFe,OAGFhE,mBAAS,QAHP,mBAGvBd,EAHuB,KAGf+E,EAHe,OAINjE,mBAAS,IAJH,mBAIvBkE,EAJuB,KAIjBC,EAJiB,KAqB5B,SAASC,IACP,IAAIC,EAAO,eAAQH,GACfI,EAAeD,EAAQrF,MAAMuF,MAEjC,OADAJ,EAAQE,GACDC,EAGT,SAASE,EAAQjD,GAWf,IATA,IAAI2C,EAAO,IAAI5D,EAGXmE,EAAalD,EAAYP,KAAI,SAACrC,EAAYiE,GAC5C,OAAO,IAAIlE,EAAOC,EAAY,IAAKiE,MAEjC8B,EAAY,IAAIhG,EAAO,SAAU,KAAM,GAGlCY,EAAI,EAAGA,EAAI,EAAGA,IAErBmF,EAAWvB,SAAQ,SAAC5B,GAEd4C,EAAKlF,MAAMO,OAAS,IACtB2E,EAAOS,EAAQT,IAEjB5C,EAAOsD,IAAIV,EAAKlF,MAAMuF,UAGxBG,EAAUE,IAAIV,EAAKlF,MAAMuF,OAK3B,GADAE,EAAW,GAAGtF,eAAgB,EACD,MAAzBsF,EAAW,GAAGvF,OAAgB,CAChC,IAAI2F,EAAMC,EAAWL,EAAW,GAAG5F,IAAM,EAAG4F,EAAYC,GACxDD,EAAaI,EAAIzD,QACjBsD,EAAYG,EAAId,OAElBd,EAAWwB,GACXT,EAAUU,GACVT,EAAU,YACVE,EAAQD,GAGV,SAASa,EAAMzD,GAIb,GAHAA,EAAOsD,IAAIR,KAGc,MAFF9C,EAAOrC,cAEA,CAC5B,IAAI4F,EAAMC,EAAWxD,EAAOzC,IAAM,EAAGuC,EAAS2C,GAC9Cd,EAAW4B,EAAIzD,SACf4C,EAAUa,EAAId,SAGlB,SAASiB,EAAM1D,GACbA,EAAO0D,QAEP,IAAIH,EAAMC,EAAWxD,EAAOzC,IAAM,EAAGuC,EAAS2C,GAC9Cd,EAAW4B,EAAIzD,SACf4C,EAAUa,EAAId,QAwChB,SAASe,EAAWG,EAAcC,EAAUC,GAC1C,IAAIV,EAAU,YAAOS,GACjBR,EAAYS,EAChB,GAAIF,IAAiBR,EAAWlF,OAC9BkF,EAAWvB,SAAQ,SAAC5B,GAClBA,EAAOnC,eAAgB,KAEzBuF,EAAUvF,eAAgB,OAE1B,IAAK,IAAIG,EAAI,EAAGA,EAAImF,EAAWlF,OAAQD,IACrC,GAAImF,EAAWnF,GAAGT,MAAQoG,EAAc,CACtC,GAA6B,MAAzBR,EAAWnF,GAAGJ,OAAgB,CAChC4F,EAAWG,EAAe,EAAGR,EAAYC,GACzC,MAEAD,EAAWnF,GAAGH,eAAgB,OAGhCsF,EAAWnF,GAAGH,eAAgB,EAIpC,MAAO,CAAEiC,QAASqD,EAAYV,OAAQW,GAExC,SAASC,EAAQS,GACf,IAAIf,EAAU,IAAI/D,EAKlB,OAJA8E,EAAMpG,MAAMkE,SAAQ,SAACvD,GACnB0E,EAAQrF,MAAMY,KAAKD,MAGd0E,EAKT,OArJAjE,qBAAU,WAEJ2D,EAAO5E,eA0Eb,WACE,IAAIuF,EAAYX,EAShB,GAA+B,IAPT3C,EACnB0B,QAAO,SAACxB,GACP,MAAgC,UAAzBA,EAAOrC,iBAEf+B,KAAI,SAACM,GACJ,OAAOA,KAES/B,OAAc,CAIhC,KAAOmF,EAAUtF,MAAQ,IACvB2E,EAAOa,IAAIR,KAGb,IAAIK,EAAU,YAAOrD,GACrBqD,EAAWvB,SAAQ,SAAC5B,GAEW,UAAzBA,EAAOrC,gBACLyF,EAAUtF,MAAQ,IACpBkC,EAAOrC,cAAgB,mBACvBqC,EAAOpC,OAAS,KACPoC,EAAOlC,OAASsF,EAAUtF,OACnCkC,EAAOrC,cAAgB,2BACvBqC,EAAOpC,OAAS,MAEhBoC,EAAOrC,cAAgB,sCACvBqC,EAAOpC,OAAS,SAItB+D,EAAWwB,GACXT,EAAUU,IA5GVW,KAED,CAACtB,EAAO5E,gBAEXiB,qBAAU,WACJ8D,GACEA,EAAKlF,MAAMO,OAAS,GACtB4E,EAAQQ,EAAQT,MAGnB,CAACA,IAyIF,qBAAK7D,UAAU,MAAf,SACc,SAAXnB,EACC,cAACmC,EAAD,CAAUa,UAAWsC,EAASpD,QAASA,IAEvC,gCACE,cAACH,EAAD,CACEC,QAASsD,EACTrD,YAXV,WACE8C,EAAU,SAWF7C,QAASA,EAAQJ,KAAI,SAACM,GACpB,OAAOA,EAAO3C,gBAGlB,qBAAK0B,UAAU,WAAf,SACE,gCACE,kCACE,cAAC2C,EAAD,CACE5B,QAAS,CAAC2C,GACVL,QAASqB,EACTpB,QAASqB,IAEX,cAAChC,EAAD,CAAY5B,QAASA,EAASsC,QAASqB,EAAOpB,QAASqB,gBCrLvEM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,W","file":"static/js/main.898b03b4.chunk.js","sourcesContent":["export default class Player {\r\n  constructor(playerName, type, key) {\r\n    this.props = {\r\n      key: key,\r\n      playerName: playerName,\r\n      cards: [], //array of cards\r\n      type: type,\r\n      statusMessage: \"0\", //0 means game in progress\r\n      status: \"P\", //(P)rogress, (W)in, (L)ose\r\n      currentPlayer: false,\r\n    };\r\n  }\r\n  //getters\r\n  get key() {\r\n    return this.props.key;\r\n  }\r\n  get cards() {\r\n    return this.props.cards;\r\n  }\r\n  //score is derived\r\n  get score() {\r\n    let score = 0;\r\n    let numberOfA = 0;\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      let val = 0;\r\n      switch (this.cards[i].value) {\r\n        case \"A\":\r\n          val = 11;\r\n          numberOfA++;\r\n          break;\r\n        case \"J\":\r\n          val = 10;\r\n          break;\r\n        case \"Q\":\r\n          val = 10;\r\n          break;\r\n        case \"K\":\r\n          val = 10;\r\n          break;\r\n        default:\r\n          val = parseInt(this.cards[i].value);\r\n      }\r\n      score += val;\r\n    }\r\n    if (score > 21) {\r\n      while (score > 21 && numberOfA > 0) {\r\n        score = score - 10;\r\n        numberOfA--;\r\n      }\r\n    }\r\n    return score;\r\n  }\r\n  get playerName() {\r\n    return this.props.playerName;\r\n  }\r\n  get type() {\r\n    return this.props.type;\r\n  }\r\n  get status() {\r\n    return this.props.status;\r\n  }\r\n  get statusMessage() {\r\n    return this.props.statusMessage;\r\n  }\r\n  get currentPlayer() {\r\n    return this.props.currentPlayer;\r\n  }\r\n  set status(status) {\r\n    this.props.status = status;\r\n  }\r\n  set statusMessage(statusMessage) {\r\n    this.props.statusMessage = statusMessage;\r\n  }\r\n  set currentPlayer(currentPlayer) {\r\n    this.props.currentPlayer = currentPlayer;\r\n  }\r\n  //deal card to player hand\r\n  hit(card) {\r\n    this.cards.push(card);\r\n    this.statusMessage = this.determineStatusMessage();\r\n  }\r\n  stand() {\r\n    this.statusMessage = \"STAND\";\r\n    this.status = \"S\";\r\n  }\r\n  //determine status of player\r\n  determineStatusMessage() {\r\n    let score = this.score;\r\n    let newStatus;\r\n    if (score > 21) {\r\n      newStatus = \"LOSE! You bust.\";\r\n      this.status = \"L\";\r\n    } else if (score === 21) {\r\n      newStatus = \"WIN\";\r\n      this.status = \"W\";\r\n    } else if (score < 21 && this.cards.length >= 5) {\r\n      newStatus = \"WIN! You have 5 cards and less than 21 score\";\r\n      this.status = \"W\";\r\n    } else {\r\n      newStatus = \"0\";\r\n      this.status = \"P\";\r\n    }\r\n    return newStatus;\r\n  }\r\n}\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nexport default function Card(props) {\r\n  let [suit, setSuit] = useState(props.suit);\r\n  let [value, setValue] = useState(props.value);\r\n\r\n  //suit useEffect\r\n  useEffect(() => {\r\n    if (props.suit !== suit) {\r\n      setSuit(props.suit);\r\n    }\r\n  }, [props.suit]);\r\n  //value useEffect\r\n  useEffect(() => {\r\n    if (props.value !== value) {\r\n      setValue(props.value);\r\n    }\r\n  }, [props.value]);\r\n  return (\r\n    <div\r\n      className={\r\n        !suit || !value\r\n          ? \"card card-flipped\"\r\n          : suit === \"♥\" || suit === \"♦\"\r\n          ? \"card color-red\"\r\n          : \"card color-black\"\r\n      }\r\n    >\r\n      <table className=\"card-main-container\">\r\n        <tbody>\r\n          <tr className=\"card-top\">\r\n            <td>{value}</td>\r\n          </tr>\r\n          <tr className=\"card-middle\">\r\n            <td>{suit}</td>\r\n          </tr>\r\n          <tr className=\"card-bottom\">\r\n            <td>{value}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","export default class Deck {\r\n  constructor() {\r\n    this.cards = this.generateDeck();\r\n    this.shuffle();\r\n  }\r\n\r\n  shuffle() {\r\n    for (let i = this.cards.length - 1; i > 0; i--) {\r\n      //get a random integer between 0 and i\r\n      const newIndex = Math.floor(Math.random() * (i + 1));\r\n      const oldValue = this.cards[newIndex];\r\n      this.cards[newIndex] = this.cards[i];\r\n      this.cards[i] = oldValue;\r\n    }\r\n  }\r\n  generateDeck() {\r\n    const Suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\r\n    const Values = [\r\n      \"A\",\r\n      \"2\",\r\n      \"3\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\",\r\n      \"10\",\r\n      \"J\",\r\n      \"Q\",\r\n      \"K\",\r\n    ];\r\n    return Suits.flatMap((suit) => {\r\n      return Values.map((value) => {\r\n        return { suit, value };\r\n      });\r\n    });\r\n  }\r\n}\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nexport default function Header(props) {\r\n  return (\r\n    <header className=\"App-header game-header\">\r\n      <div>\r\n        <button className=\"menu-btn\" onClick={props.onMenuClick}>\r\n          Main menu\r\n        </button>\r\n        <button\r\n          className=\"menu-btn\"\r\n          onClick={() => props.onClick(props.players)}\r\n        >\r\n          New Round\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nexport default function MainMenu(props) {\r\n  let [playerNames, setPlayerNames] = useState(() => {\r\n    if (props.players)\r\n      return props.players.map((player) => {\r\n        return player.playerName;\r\n      });\r\n    else return [];\r\n  });\r\n  let [newPlayer, setNewPlayer] = useState(\"\");\r\n  let inputRef = React.createRef();\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, [newPlayer]);\r\n\r\n  function addPlayerName(playerName) {\r\n    let newPlayerNames = [...playerNames];\r\n    newPlayerNames.push(playerName);\r\n    setPlayerNames(newPlayerNames);\r\n    setNewPlayer(\"\");\r\n  }\r\n\r\n  function handleChange(event) {\r\n    setNewPlayer(event.target.value);\r\n  }\r\n  function removePlayerName(indexToRemove) {\r\n    let newPlayerNames = playerNames\r\n      .filter((playerName, index) => {\r\n        if (index !== indexToRemove) {\r\n          return playerName;\r\n        }\r\n      })\r\n      .map((playerName) => {\r\n        return playerName;\r\n      });\r\n    setPlayerNames(newPlayerNames);\r\n  }\r\n  return (\r\n    <div>\r\n      <header className=\"App-header\">\r\n        <h1 className=\"heading\">Blackjack</h1>\r\n        <h2 className=\"sub-heading\">by Mehraan Ahmed Khan</h2>\r\n        <button\r\n          className=\"start-btn\"\r\n          onClick={() => props.onNewGame(playerNames)}\r\n          disabled={playerNames.length === 0 ? true : false}\r\n        >\r\n          Start Game\r\n        </button>\r\n      </header>\r\n      <body>\r\n        <table className=\"main-menu\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <div className=\"add-player\">\r\n                  <form onSubmit={() => addPlayerName(newPlayer)}>\r\n                    <input\r\n                      placeholder=\"New player name\"\r\n                      onChange={handleChange}\r\n                      className=\"player-input\"\r\n                      value={newPlayer}\r\n                      ref={inputRef}\r\n                    />\r\n\r\n                    <button\r\n                      className=\"add-btn\"\r\n                      onClick={() => addPlayerName(newPlayer)}\r\n                      disabled={newPlayer ? false : true}\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n                <h6 className=\"list-heading\">Players</h6>\r\n                <ol className=\"player-list\">\r\n                  {playerNames.length === 0 ? (\r\n                    <div style={{ textAlign: \"center\" }}>\r\n                      Please add a player\r\n                    </div>\r\n                  ) : (\r\n                    playerNames.map((playerName, index) => {\r\n                      return (\r\n                        <li>\r\n                          {playerName}\r\n                          <button\r\n                            className=\"remove-btn\"\r\n                            onClick={() => {\r\n                              removePlayerName(index);\r\n                            }}\r\n                          >\r\n                            X\r\n                          </button>\r\n                        </li>\r\n                      );\r\n                    })\r\n                  )}\r\n                </ol>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nexport default function PlayerSeat(props) {\r\n  let [players, setPlayers] = useState(props.players);\r\n  let focusElem = React.createRef();\r\n  //players useEffect\r\n  useEffect(() => {\r\n    if (props.players !== players) {\r\n      setPlayers(props.players);\r\n      props.players.forEach((player) => {\r\n        if (player.currentPlayer) {\r\n          document\r\n            .getElementById(`player-block-${player.key}`)\r\n            .scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n      });\r\n    }\r\n  }, [props.players]);\r\n\r\n  let renderPlayers = players.map((player, index) => {\r\n    let labelClass = \"\";\r\n    if (player.status === \"W\") labelClass = \"color-green\";\r\n    else if (player.status === \"S\") labelClass = \"color-yellow\";\r\n    else if (player.status === \"L\") labelClass = \"color-red\";\r\n\r\n    return (\r\n      <div id={`player-block-${player.key}`} className=\"player-block\">\r\n        <div className={player.currentPlayer ? \"hand current-player\" : \"hand\"}>\r\n          {player.type === \"D\" ? (\r\n            <div className=\"player-label\">\r\n              {player.playerName}\r\n              {!player.currentPlayer ? null : ` - ${player.score}`}\r\n            </div>\r\n          ) : (\r\n            <div className={`player-label ${labelClass}`}>\r\n              {player.playerName} - {player.score} -{\" \"}\r\n              {player.statusMessage === \"0\" ? \"Playing\" : player.statusMessage}\r\n            </div>\r\n          )}\r\n          <div className=\"card-container\">\r\n            {player.cards.map((card, index) => {\r\n              if (player.type === \"D\" && !player.currentPlayer && index === 1) {\r\n                return <Card />;\r\n              } else {\r\n                return <Card suit={card.suit} value={card.value} />;\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className={player.type === \"D\" ? \"hidden\" : \"\"}>\r\n          <button\r\n            className=\"hit-btn\"\r\n            onClick={() => {\r\n              props.onHitMe(player);\r\n            }}\r\n            disabled={\r\n              player.currentPlayer && player.type === \"P\" ? false : true\r\n            }\r\n          >\r\n            Hit me!\r\n          </button>\r\n          <button\r\n            className=\"stand-btn\"\r\n            onClick={() => {\r\n              props.onStand(player);\r\n            }}\r\n            disabled={\r\n              player.currentPlayer && player.type === \"P\" ? false : true\r\n            }\r\n          >\r\n            Stand\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  let tempPlayers = [];\r\n  let finalPlayers = [];\r\n\r\n  renderPlayers.forEach((player, index) => {\r\n    tempPlayers.push(<td className=\"col-2\">{player}</td>);\r\n    //for every 2nd element\r\n    if ((index + 1) % 2 === 0 || index === renderPlayers.length - 1) {\r\n      finalPlayers.push(<tr className=\"player-row\">{tempPlayers}</tr>);\r\n      tempPlayers = [];\r\n    }\r\n  });\r\n  return finalPlayers;\r\n}\r\n","import \"./Stylesheets/App.css\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Player from \"./Components/Player\";\nimport Card from \"./Components/Card\";\nimport Deck from \"./Components/Deck\";\nimport Header from \"./Components/Header\";\nimport MainMenu from \"./Components/MainMenu\";\nimport PlayerSeat from \"./Components/PlayerSeat\";\nimport reactDOM from \"react-dom\";\n\nexport default function App() {\n  let [players, setPlayers] = useState([]);\n  let [dealer, setDealer] = useState(\"\");\n  let [status, setStatus] = useState(\"MENU\");\n  let [deck, setDeck] = useState(\"\");\n\n  useEffect(() => {\n    //If the dealers turn then deal to dealer\n    if (dealer.currentPlayer) {\n      playDealer();\n    }\n  }, [dealer.currentPlayer]);\n\n  useEffect(() => {\n    if (deck) {\n      if (deck.cards.length < 5) {\n        setDeck(addDeck(deck));\n      }\n    }\n  }, [deck]);\n\n  function drawCard() {\n    let newDeck = { ...deck };\n    let cardToReturn = newDeck.cards.pop();\n    setDeck(newDeck);\n    return cardToReturn;\n  }\n\n  function newGame(playerNames) {\n    //create deck\n    let deck = new Deck();\n\n    //Create players and dealer\n    let newPlayers = playerNames.map((playerName, index) => {\n      return new Player(playerName, \"P\", index);\n    });\n    let newDealer = new Player(\"Dealer\", \"D\", -1);\n\n    //deal initial cards\n    for (let i = 0; i < 2; i++) {\n      //deal 1 card to players\n      newPlayers.forEach((player) => {\n        //If running out of cards, add another deck\n        if (deck.cards.length < 5) {\n          deck = addDeck(deck);\n        }\n        player.hit(deck.cards.pop());\n      });\n      //then deal 1 card to dealer\n      newDealer.hit(deck.cards.pop());\n    }\n\n    //Check if first player is a winner\n    newPlayers[0].currentPlayer = true;\n    if (newPlayers[0].status === \"W\") {\n      let ret = nextPlayer(newPlayers[0].key + 1, newPlayers, newDealer);\n      newPlayers = ret.players;\n      newDealer = ret.dealer;\n    }\n    setPlayers(newPlayers);\n    setDealer(newDealer);\n    setStatus(\"NEW GAME\");\n    setDeck(deck);\n  }\n\n  function hitMe(player) {\n    player.hit(drawCard());\n    let newStatusMessage = player.statusMessage;\n    //If players turn is over, focus on next player\n    if (newStatusMessage !== \"0\") {\n      let ret = nextPlayer(player.key + 1, players, dealer);\n      setPlayers(ret.players);\n      setDealer(ret.dealer);\n    }\n  }\n  function stand(player) {\n    player.stand();\n    //focus on next player\n    let ret = nextPlayer(player.key + 1, players, dealer);\n    setPlayers(ret.players);\n    setDealer(ret.dealer);\n  }\n  function playDealer() {\n    let newDealer = dealer;\n    //pull out only those players whose state is STAND\n    let standingPlayers = players\n      .filter((player) => {\n        return player.statusMessage === \"STAND\";\n      })\n      .map((player) => {\n        return player;\n      });\n    if (standingPlayers.length !== 0) {\n      //dealer must play because at least one person is standing\n\n      //While dealer has less than 17, he MUST hit\n      while (newDealer.score < 17) {\n        dealer.hit(drawCard());\n      }\n      //Finally check each player above to see who wins\n      let newPlayers = [...players];\n      newPlayers.forEach((player) => {\n        //only check the standing players\n        if (player.statusMessage === \"STAND\") {\n          if (newDealer.score > 21) {\n            player.statusMessage = \"WIN! Dealer bust\";\n            player.status = \"W\";\n          } else if (player.score >= newDealer.score) {\n            player.statusMessage = \"WIN! You beat the dealer\";\n            player.status = \"W\";\n          } else {\n            player.statusMessage = \"Lose! The dealer has a higher score\";\n            player.status = \"L\";\n          }\n        }\n      });\n      setPlayers(newPlayers);\n      setDealer(newDealer);\n    }\n  }\n  function nextPlayer(nextPlayerId, pPlayers, pDealer) {\n    let newPlayers = [...pPlayers];\n    let newDealer = pDealer;\n    if (nextPlayerId === newPlayers.length) {\n      newPlayers.forEach((player) => {\n        player.currentPlayer = false;\n      });\n      newDealer.currentPlayer = true;\n    } else {\n      for (let i = 0; i < newPlayers.length; i++) {\n        if (newPlayers[i].key === nextPlayerId) {\n          if (newPlayers[i].status === \"W\") {\n            nextPlayer(nextPlayerId + 1, newPlayers, newDealer);\n            break;\n          } else {\n            newPlayers[i].currentPlayer = true;\n          }\n        } else {\n          newPlayers[i].currentPlayer = false;\n        }\n      }\n    }\n    return { players: newPlayers, dealer: newDealer };\n  }\n  function addDeck(pDeck) {\n    let newDeck = new Deck();\n    pDeck.cards.forEach((card) => {\n      newDeck.cards.push(card);\n    });\n\n    return newDeck;\n  }\n  function toMenu() {\n    setStatus(\"MENU\");\n  }\n  return (\n    <div className=\"App\">\n      {status === \"MENU\" ? (\n        <MainMenu onNewGame={newGame} players={players} />\n      ) : (\n        <div>\n          <Header\n            onClick={newGame}\n            onMenuClick={toMenu}\n            players={players.map((player) => {\n              return player.playerName;\n            })}\n          />\n          <div className=\"App-body\">\n            <table>\n              <tbody>\n                <PlayerSeat\n                  players={[dealer]}\n                  onHitMe={hitMe}\n                  onStand={stand}\n                />\n                <PlayerSeat players={players} onHitMe={hitMe} onStand={stand} />\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}