{"version":3,"sources":["App.js","index.js"],"names":["Header","props","className","onClick","onMenuClick","players","MainMenu","useState","map","player","playerName","playerNames","setPlayerNames","newPlayer","setNewPlayer","inputRef","React","createRef","addPlayerName","newPlayerNames","push","useEffect","current","focus","onNewGame","disabled","length","onSubmit","placeholder","onChange","event","target","value","ref","style","textAlign","color","index","indexToRemove","filter","removePlayerName","Card","suit","setSuit","setValue","PlayerSeat","setPlayers","forEach","currentPlayer","document","getElementById","key","scrollIntoView","behavior","renderPlayers","labelClass","status","id","type","score","statusMessage","cards","card","onHitMe","onStand","tempPlayers","finalPlayers","Deck","this","generateDeck","shuffle","i","newIndex","Math","floor","random","oldValue","Values","flatMap","Player","numberOfA","val","parseInt","determineStatusMessage","newStatus","App","dealer","setDealer","setStatus","deck","setDeck","drawCard","newDeck","cardToReturn","pop","newGame","newPlayers","newDealer","addDeck","hit","ret","nextPlayer","hitMe","stand","nextPlayerId","pPlayers","pDealer","pDeck","playDealer","ReactDOM","render","StrictMode"],"mappings":"yPAIA,SAASA,EAAOC,GACd,OACE,yBAAQC,UAAU,aAAlB,UACE,oBAAIA,UAAU,eAAd,uBACA,oBAAIA,UAAU,mBAAd,mCACA,gCACE,wBAAQA,UAAU,WAAWC,QAASF,EAAMG,YAA5C,uBAGA,wBACEF,UAAU,WACVC,QAAS,kBAAMF,EAAME,QAAQF,EAAMI,UAFrC,6BAUR,SAASC,EAASL,GAAQ,IAAD,EACaM,oBAAS,WAC3C,OAAIN,EAAMI,QACDJ,EAAMI,QAAQG,KAAI,SAACC,GACxB,OAAOA,EAAOC,cAEN,MANS,mBAClBC,EADkB,KACLC,EADK,OAQSL,mBAAS,IARlB,mBAQlBM,EARkB,KAQPC,EARO,KASnBC,EAAWC,IAAMC,YAMrB,SAASC,EAAcR,GACrB,IAAIS,EAAc,YAAOR,GACzBQ,EAAeC,KAAKV,GACpBE,EAAeO,GACfL,EAAa,IAkBf,OA1BAO,qBAAU,WACRN,EAASO,QAAQC,UAChB,CAACV,IAyBF,gCACE,yBAAQX,UAAU,aAAlB,UACE,oBAAIA,UAAU,UAAd,uBACA,oBAAIA,UAAU,cAAd,mCACA,wBACEA,UAAU,YACVC,QAAS,kBAAMF,EAAMuB,UAAUb,IAC/Bc,SAAiC,IAAvBd,EAAYe,OAHxB,2BAQF,+BACE,uBAAOxB,UAAU,YAAjB,SACE,gCACE,6BACE,+BACE,qBAAKA,UAAU,aAAf,SACE,uBAAMyB,SAAU,kBAAMT,EAAcL,IAApC,UACE,uBACEe,YAAY,kBACZC,SArCpB,SAAsBC,GACpBhB,EAAagB,EAAMC,OAAOC,QAqCR9B,UAAU,eACV8B,MAAOnB,EACPoB,IAAKlB,IAGP,wBACEb,UAAU,UACVC,QAAS,kBAAMe,EAAcL,IAC7BY,UAAUZ,EAHZ,sBASJ,oBAAIX,UAAU,eAAd,qBACA,oBAAIA,UAAU,cAAd,SAC0B,IAAvBS,EAAYe,OACX,qBAAKQ,MAAO,CAAEC,UAAW,SAAUC,MAAO,OAA1C,iCAIAzB,EAAYH,KAAI,SAACE,EAAY2B,GAC3B,OACE,+BACG3B,EACD,wBACER,UAAU,aACVC,QAAS,YA9DnC,SAA0BmC,GACxB,IAAInB,EAAiBR,EAClB4B,QAAO,SAAC7B,EAAY2B,GACnB,GAAIA,IAAUC,EACZ,OAAO5B,KAGVF,KAAI,SAACE,GACJ,OAAOA,KAEXE,EAAeO,GAqDWqB,CAAiBH,IAHrB,qCAsB1B,SAASI,EAAKxC,GAAQ,IAAD,EACGM,mBAASN,EAAMyC,MADlB,mBACdA,EADc,KACRC,EADQ,OAEKpC,mBAASN,EAAM+B,OAFpB,mBAEdA,EAFc,KAEPY,EAFO,KAgBnB,OAXAvB,qBAAU,WACJpB,EAAMyC,OAASA,GACjBC,EAAQ1C,EAAMyC,QAEf,CAACzC,EAAMyC,OAEVrB,qBAAU,WACJpB,EAAM+B,QAAUA,GAClBY,EAAS3C,EAAM+B,SAEhB,CAAC/B,EAAM+B,QAER,qBACE9B,UACGwC,GAASV,EAEG,WAATU,GAAyB,WAATA,EAChB,iBACA,mBAHA,oBAHR,SASE,uBAAOxC,UAAU,sBAAjB,SACE,kCACE,oBAAIA,UAAU,WAAd,SACE,6BAAK8B,MAEP,oBAAI9B,UAAU,cAAd,SACE,6BAAKwC,MAEP,oBAAIxC,UAAU,cAAd,SACE,6BAAK8B,aAOjB,SAASa,EAAW5C,GAAQ,IAAD,EACGM,mBAASN,EAAMI,SADlB,mBACpBA,EADoB,KACXyC,EADW,KAIzBzB,qBAAU,WACJpB,EAAMI,UAAYA,IACpByC,EAAW7C,EAAMI,SACjBJ,EAAMI,QAAQ0C,SAAQ,SAACtC,GACjBA,EAAOuC,eACTC,SACGC,eADH,uBACkCzC,EAAO0C,MACtCC,eAAe,CAAEC,SAAU,iBAInC,CAACpD,EAAMI,UAEV,IAAIiD,EAAgBjD,EAAQG,KAAI,SAACC,EAAQ4B,GACvC,IAAIkB,EAAa,GAKjB,MAJsB,MAAlB9C,EAAO+C,OAAgBD,EAAa,cACb,MAAlB9C,EAAO+C,OAAgBD,EAAa,eAClB,MAAlB9C,EAAO+C,SAAgBD,EAAa,aAG3C,sBAAKE,GAAE,uBAAkBhD,EAAO0C,KAAOjD,UAAU,eAAjD,UACE,sBAAKA,UAAWO,EAAOuC,cAAgB,sBAAwB,OAA/D,UACmB,MAAhBvC,EAAOiD,KACN,sBAAKxD,UAAU,eAAf,UACGO,EAAOC,WACND,EAAOuC,cAAR,aAAqCvC,EAAOkD,OAApB,QAG3B,sBAAKzD,UAAS,uBAAkBqD,GAAhC,UACG9C,EAAOC,WADV,MACyBD,EAAOkD,MADhC,KACyC,IACb,MAAzBlD,EAAOmD,cAAwB,UAAYnD,EAAOmD,iBAGvD,qBAAK1D,UAAU,iBAAf,SACGO,EAAOoD,MAAMrD,KAAI,SAACsD,EAAMzB,GACvB,MAAoB,MAAhB5B,EAAOiD,MAAiBjD,EAAOuC,eAA2B,IAAVX,EAG3C,cAACI,EAAD,CAAMC,KAAMoB,EAAKpB,KAAMV,MAAO8B,EAAK9B,QAFnC,cAACS,EAAD,YAOf,sBAAKvC,UAA2B,MAAhBO,EAAOiD,KAAe,SAAW,GAAjD,UACE,wBACExD,UAAU,UACVC,QAAS,WACPF,EAAM8D,QAAQtD,IAEhBgB,UACEhB,EAAOuC,eAAiC,MAAhBvC,EAAOiD,KANnC,qBAWA,wBACExD,UAAU,YACVC,QAAS,WACPF,EAAM+D,QAAQvD,IAEhBgB,UACEhB,EAAOuC,eAAiC,MAAhBvC,EAAOiD,KANnC,4BAeJO,EAAc,GACdC,EAAe,GAUnB,OARAZ,EAAcP,SAAQ,SAACtC,EAAQ4B,GAC7B4B,EAAY7C,KAAK,oBAAIlB,UAAU,QAAd,SAAuBO,MAEnC4B,EAAQ,GAAK,IAAM,GAAKA,IAAUiB,EAAc5B,OAAS,IAC5DwC,EAAa9C,KAAK,oBAAIlB,UAAU,aAAd,SAA4B+D,KAC9CA,EAAc,OAGXC,E,IAGHC,E,WACJ,aAAe,oBACbC,KAAKP,MAAQO,KAAKC,eAClBD,KAAKE,U,2CAGP,WACE,IAAK,IAAIC,EAAIH,KAAKP,MAAMnC,OAAS,EAAG6C,EAAI,EAAGA,IAAK,CAE9C,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAC3CK,EAAWR,KAAKP,MAAMW,GAC5BJ,KAAKP,MAAMW,GAAYJ,KAAKP,MAAMU,GAClCH,KAAKP,MAAMU,GAAKK,K,0BAGpB,WACE,IACMC,EAAS,CACb,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,KAEF,MAhBc,CAAC,SAAK,SAAK,SAAK,UAgBjBC,SAAQ,SAACpC,GACpB,OAAOmC,EAAOrE,KAAI,SAACwB,GACjB,MAAO,CAAEU,OAAMV,mB,KAKjB+C,E,WACJ,WAAYrE,EAAYgD,EAAMP,GAAM,oBAClCiB,KAAKnE,MAAQ,CACXkD,IAAKA,EACLzC,WAAYA,EACZmD,MAAO,GACPH,KAAMA,EACNE,cAAe,IACfJ,OAAQ,IACRR,eAAe,G,qCAInB,WACE,OAAOoB,KAAKnE,MAAMkD,M,iBAEpB,WACE,OAAOiB,KAAKnE,MAAM4D,Q,iBAGpB,WAGE,IAFA,IAAIF,EAAQ,EACRqB,EAAY,EACPT,EAAI,EAAGA,EAAIH,KAAKP,MAAMnC,OAAQ6C,IAAK,CAC1C,IAAIU,EAAM,EACV,OAAQb,KAAKP,MAAMU,GAAGvC,OACpB,IAAK,IACHiD,EAAM,GACND,IACA,MACF,IAAK,IAGL,IAAK,IAGL,IAAK,IACHC,EAAM,GACN,MACF,QACEA,EAAMC,SAASd,KAAKP,MAAMU,GAAGvC,OAEjC2B,GAASsB,EAEX,GAAItB,EAAQ,GACV,KAAOA,EAAQ,IAAMqB,EAAY,GAC/BrB,GAAgB,GAChBqB,IAGJ,OAAOrB,I,sBAET,WACE,OAAOS,KAAKnE,MAAMS,a,gBAEpB,WACE,OAAO0D,KAAKnE,MAAMyD,O,kBAEpB,WACE,OAAOU,KAAKnE,MAAMuD,Q,IAQpB,SAAWA,GACTY,KAAKnE,MAAMuD,OAASA,I,yBAPtB,WACE,OAAOY,KAAKnE,MAAM2D,e,IAQpB,SAAkBA,GAChBQ,KAAKnE,MAAM2D,cAAgBA,I,yBAP7B,WACE,OAAOQ,KAAKnE,MAAM+C,e,IAQpB,SAAkBA,GAChBoB,KAAKnE,MAAM+C,cAAgBA,I,iBAG7B,SAAIc,GACFM,KAAKP,MAAMzC,KAAK0C,GAChBM,KAAKR,cAAgBQ,KAAKe,2B,mBAE5B,WACEf,KAAKR,cAAgB,QACrBQ,KAAKZ,OAAS,M,oCAGhB,WACE,IACI4B,EADAzB,EAAQS,KAAKT,MAejB,OAbIA,EAAQ,IACVyB,EAAY,kBACZhB,KAAKZ,OAAS,KACK,KAAVG,GACTyB,EAAY,MACZhB,KAAKZ,OAAS,KACLG,EAAQ,IAAMS,KAAKP,MAAMnC,QAAU,GAC5C0D,EAAY,+CACZhB,KAAKZ,OAAS,MAEd4B,EAAY,IACZhB,KAAKZ,OAAS,KAET4B,M,KAGI,SAASC,IAAO,IAAD,EACA9E,mBAAS,IADT,mBACvBF,EADuB,KACdyC,EADc,OAEFvC,mBAAS,IAFP,mBAEvB+E,EAFuB,KAEfC,EAFe,OAGFhF,mBAAS,QAHP,mBAGvBiD,EAHuB,KAGfgC,EAHe,OAINjF,mBAAS,IAJH,mBAIvBkF,EAJuB,KAIjBC,EAJiB,KAqB5B,SAASC,IACP,IAAIC,EAAO,eAAQH,GACfI,EAAeD,EAAQ/B,MAAMiC,MAEjC,OADAJ,EAAQE,GACDC,EAGT,SAASE,EAAQpF,GAWf,IATA,IAAI8E,EAAO,IAAItB,EAGX6B,EAAarF,EAAYH,KAAI,SAACE,EAAY2B,GAC5C,OAAO,IAAI0C,EAAOrE,EAAY,IAAK2B,MAEjC4D,EAAY,IAAIlB,EAAO,SAAU,KAAM,GAGlCR,EAAI,EAAGA,EAAI,EAAGA,IAErByB,EAAWjD,SAAQ,SAACtC,GAEdgF,EAAK5B,MAAMnC,OAAS,IACtB+D,EAAOS,EAAQT,IAEjBhF,EAAO0F,IAAIV,EAAK5B,MAAMiC,UAGxBG,EAAUE,IAAIV,EAAK5B,MAAMiC,OAK3B,GADAE,EAAW,GAAGhD,eAAgB,EACD,MAAzBgD,EAAW,GAAGxC,OAAgB,CAChC,IAAI4C,EAAMC,EAAWL,EAAW,GAAG7C,IAAM,EAAG6C,EAAYC,GACxDD,EAAaI,EAAI/F,QACjB4F,EAAYG,EAAId,OAElBxC,EAAWkD,GACXT,EAAUU,GACVT,EAAU,YACVE,EAAQD,GAGV,SAASa,EAAM7F,GAIb,GAHAA,EAAO0F,IAAIR,KAGc,MAFFlF,EAAOmD,cAEA,CAC5B,IAAIwC,EAAMC,EAAW5F,EAAO0C,IAAM,EAAG9C,EAASiF,GAC9CxC,EAAWsD,EAAI/F,SACfkF,EAAUa,EAAId,SAGlB,SAASiB,EAAM9F,GACbA,EAAO8F,QAEP,IAAIH,EAAMC,EAAW5F,EAAO0C,IAAM,EAAG9C,EAASiF,GAC9CxC,EAAWsD,EAAI/F,SACfkF,EAAUa,EAAId,QAwChB,SAASe,EAAWG,EAAcC,EAAUC,GAC1C,IAAIV,EAAU,YAAOS,GACjBR,EAAYS,EAChB,GAAIF,IAAiBR,EAAWtE,OAC9BsE,EAAWjD,SAAQ,SAACtC,GAClBA,EAAOuC,eAAgB,KAEzBiD,EAAUjD,eAAgB,OAE1B,IAAK,IAAIuB,EAAI,EAAGA,EAAIyB,EAAWtE,OAAQ6C,IACrC,GAAIyB,EAAWzB,GAAGpB,MAAQqD,EAAc,CACtC,GAA6B,MAAzBR,EAAWzB,GAAGf,OAAgB,CAChC6C,EAAWG,EAAe,EAAGR,EAAYC,GACzC,MAEAD,EAAWzB,GAAGvB,eAAgB,OAGhCgD,EAAWzB,GAAGvB,eAAgB,EAIpC,MAAO,CAAE3C,QAAS2F,EAAYV,OAAQW,GAExC,SAASC,EAAQS,GACf,IAAIf,EAAU,IAAIzB,EAKlB,OAJAwC,EAAM9C,MAAMd,SAAQ,SAACe,GACnB8B,EAAQ/B,MAAMzC,KAAK0C,MAGd8B,EAKT,OArJAvE,qBAAU,WAEJiE,EAAOtC,eA0Eb,WACE,IAAIiD,EAAYX,EAShB,GAA+B,IAPTjF,EACnBkC,QAAO,SAAC9B,GACP,MAAgC,UAAzBA,EAAOmD,iBAEfpD,KAAI,SAACC,GACJ,OAAOA,KAESiB,OAAc,CAIhC,KAAOuE,EAAUtC,MAAQ,IACvB2B,EAAOa,IAAIR,KAGb,IAAIK,EAAU,YAAO3F,GACrB2F,EAAWjD,SAAQ,SAACtC,GAEW,UAAzBA,EAAOmD,gBACLqC,EAAUtC,MAAQ,IACpBlD,EAAOmD,cAAgB,mBACvBnD,EAAO+C,OAAS,KACP/C,EAAOkD,OAASsC,EAAUtC,OACnClD,EAAOmD,cAAgB,2BACvBnD,EAAO+C,OAAS,MAEhB/C,EAAOmD,cAAgB,sCACvBnD,EAAO+C,OAAS,SAItBV,EAAWkD,GACXT,EAAUU,IA5GVW,KAED,CAACtB,EAAOtC,gBAEX3B,qBAAU,WACJoE,GACEA,EAAK5B,MAAMnC,OAAS,GACtBgE,EAAQQ,EAAQT,MAGnB,CAACA,IAyIF,qBAAKvF,UAAU,MAAf,SACc,SAAXsD,EACC,cAAClD,EAAD,CAAUkB,UAAWuE,EAAS1F,QAASA,IAEvC,gCACE,cAACL,EAAD,CACEG,QAAS4F,EACT3F,YAXV,WACEoF,EAAU,SAWFnF,QAASA,EAAQG,KAAI,SAACC,GACpB,OAAOA,EAAOC,gBAGlB,qBAAKR,UAAU,WAAf,SACE,gCACE,kCACE,cAAC2C,EAAD,CACExC,QAAS,CAACiF,GACVvB,QAASuC,EACTtC,QAASuC,IAEX,cAAC1D,EAAD,CAAYxC,QAASA,EAAS0D,QAASuC,EAAOtC,QAASuC,gBC/jBvEM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9D,SAASC,eAAe,W","file":"static/js/main.a2e41c68.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport reactDOM from \"react-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <h1 className=\"heading game\">Blackjack</h1>\n      <h2 className=\"sub-heading game\">By Mehraan Ahmed Khan</h2>\n      <div>\n        <button className=\"menu-btn\" onClick={props.onMenuClick}>\n          Main menu\n        </button>\n        <button\n          className=\"menu-btn\"\n          onClick={() => props.onClick(props.players)}\n        >\n          New Round\n        </button>\n      </div>\n    </header>\n  );\n}\nfunction MainMenu(props) {\n  let [playerNames, setPlayerNames] = useState(() => {\n    if (props.players)\n      return props.players.map((player) => {\n        return player.playerName;\n      });\n    else return [];\n  });\n  let [newPlayer, setNewPlayer] = useState(\"\");\n  let inputRef = React.createRef();\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, [newPlayer]);\n\n  function addPlayerName(playerName) {\n    let newPlayerNames = [...playerNames];\n    newPlayerNames.push(playerName);\n    setPlayerNames(newPlayerNames);\n    setNewPlayer(\"\");\n  }\n\n  function handleChange(event) {\n    setNewPlayer(event.target.value);\n  }\n  function removePlayerName(indexToRemove) {\n    let newPlayerNames = playerNames\n      .filter((playerName, index) => {\n        if (index !== indexToRemove) {\n          return playerName;\n        }\n      })\n      .map((playerName) => {\n        return playerName;\n      });\n    setPlayerNames(newPlayerNames);\n  }\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1 className=\"heading\">Blackjack</h1>\n        <h2 className=\"sub-heading\">By Mehraan Ahmed Khan</h2>\n        <button\n          className=\"start-btn\"\n          onClick={() => props.onNewGame(playerNames)}\n          disabled={playerNames.length === 0 ? true : false}\n        >\n          Start Game\n        </button>\n      </header>\n      <body>\n        <table className=\"main-menu\">\n          <tbody>\n            <tr>\n              <td>\n                <div className=\"add-player\">\n                  <form onSubmit={() => addPlayerName(newPlayer)}>\n                    <input\n                      placeholder=\"New player name\"\n                      onChange={handleChange}\n                      className=\"player-input\"\n                      value={newPlayer}\n                      ref={inputRef}\n                    />\n\n                    <button\n                      className=\"add-btn\"\n                      onClick={() => addPlayerName(newPlayer)}\n                      disabled={newPlayer ? false : true}\n                    >\n                      Add\n                    </button>\n                  </form>\n                </div>\n                <h6 className=\"list-heading\">Players</h6>\n                <ol className=\"player-list\">\n                  {playerNames.length === 0 ? (\n                    <div style={{ textAlign: \"center\", color: \"red\" }}>\n                      Please add a player\n                    </div>\n                  ) : (\n                    playerNames.map((playerName, index) => {\n                      return (\n                        <li>\n                          {playerName}\n                          <button\n                            className=\"remove-btn\"\n                            onClick={() => {\n                              removePlayerName(index);\n                            }}\n                          >\n                            X\n                          </button>\n                        </li>\n                      );\n                    })\n                  )}\n                </ol>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </body>\n    </div>\n  );\n}\n\nfunction Card(props) {\n  let [suit, setSuit] = useState(props.suit);\n  let [value, setValue] = useState(props.value);\n\n  //suit useEffect\n  useEffect(() => {\n    if (props.suit !== suit) {\n      setSuit(props.suit);\n    }\n  }, [props.suit]);\n  //value useEffect\n  useEffect(() => {\n    if (props.value !== value) {\n      setValue(props.value);\n    }\n  }, [props.value]);\n  return (\n    <div\n      className={\n        !suit || !value\n          ? \"card card-flipped\"\n          : suit === \"♥\" || suit === \"♦\"\n          ? \"card color-red\"\n          : \"card color-black\"\n      }\n    >\n      <table className=\"card-main-container\">\n        <tbody>\n          <tr className=\"card-top\">\n            <td>{value}</td>\n          </tr>\n          <tr className=\"card-middle\">\n            <td>{suit}</td>\n          </tr>\n          <tr className=\"card-bottom\">\n            <td>{value}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\nfunction PlayerSeat(props) {\n  let [players, setPlayers] = useState(props.players);\n  let focusElem = React.createRef();\n  //players useEffect\n  useEffect(() => {\n    if (props.players !== players) {\n      setPlayers(props.players);\n      props.players.forEach((player) => {\n        if (player.currentPlayer) {\n          document\n            .getElementById(`player-block-${player.key}`)\n            .scrollIntoView({ behavior: \"smooth\" });\n        }\n      });\n    }\n  }, [props.players]);\n\n  let renderPlayers = players.map((player, index) => {\n    let labelClass = \"\";\n    if (player.status === \"W\") labelClass = \"color-green\";\n    else if (player.status === \"S\") labelClass = \"color-yellow\";\n    else if (player.status === \"L\") labelClass = \"color-red\";\n\n    return (\n      <div id={`player-block-${player.key}`} className=\"player-block\">\n        <div className={player.currentPlayer ? \"hand current-player\" : \"hand\"}>\n          {player.type === \"D\" ? (\n            <div className=\"player-label\">\n              {player.playerName}\n              {!player.currentPlayer ? null : ` - ${player.score}`}\n            </div>\n          ) : (\n            <div className={`player-label ${labelClass}`}>\n              {player.playerName} - {player.score} -{\" \"}\n              {player.statusMessage === \"0\" ? \"Playing\" : player.statusMessage}\n            </div>\n          )}\n          <div className=\"card-container\">\n            {player.cards.map((card, index) => {\n              if (player.type === \"D\" && !player.currentPlayer && index === 1) {\n                return <Card />;\n              } else {\n                return <Card suit={card.suit} value={card.value} />;\n              }\n            })}\n          </div>\n        </div>\n        <div className={player.type === \"D\" ? \"hidden\" : \"\"}>\n          <button\n            className=\"hit-btn\"\n            onClick={() => {\n              props.onHitMe(player);\n            }}\n            disabled={\n              player.currentPlayer && player.type === \"P\" ? false : true\n            }\n          >\n            Hit me!\n          </button>\n          <button\n            className=\"stand-btn\"\n            onClick={() => {\n              props.onStand(player);\n            }}\n            disabled={\n              player.currentPlayer && player.type === \"P\" ? false : true\n            }\n          >\n            Stand\n          </button>\n        </div>\n      </div>\n    );\n  });\n  let tempPlayers = [];\n  let finalPlayers = [];\n\n  renderPlayers.forEach((player, index) => {\n    tempPlayers.push(<td className=\"col-2\">{player}</td>);\n    //for every 2nd element\n    if ((index + 1) % 2 === 0 || index === renderPlayers.length - 1) {\n      finalPlayers.push(<tr className=\"player-row\">{tempPlayers}</tr>);\n      tempPlayers = [];\n    }\n  });\n  return finalPlayers;\n}\n\nclass Deck {\n  constructor() {\n    this.cards = this.generateDeck();\n    this.shuffle();\n  }\n\n  shuffle() {\n    for (let i = this.cards.length - 1; i > 0; i--) {\n      //get a random integer between 0 and i\n      const newIndex = Math.floor(Math.random() * (i + 1));\n      const oldValue = this.cards[newIndex];\n      this.cards[newIndex] = this.cards[i];\n      this.cards[i] = oldValue;\n    }\n  }\n  generateDeck() {\n    const Suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\n    const Values = [\n      \"A\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"10\",\n      \"J\",\n      \"Q\",\n      \"K\",\n    ];\n    return Suits.flatMap((suit) => {\n      return Values.map((value) => {\n        return { suit, value };\n      });\n    });\n  }\n}\nclass Player {\n  constructor(playerName, type, key) {\n    this.props = {\n      key: key,\n      playerName: playerName,\n      cards: [], //array of cards\n      type: type,\n      statusMessage: \"0\", //0 means game in progress\n      status: \"P\", //(P)rogress, (W)in, (L)ose\n      currentPlayer: false,\n    };\n  }\n  //getters\n  get key() {\n    return this.props.key;\n  }\n  get cards() {\n    return this.props.cards;\n  }\n  //score is derived\n  get score() {\n    let score = 0;\n    let numberOfA = 0;\n    for (let i = 0; i < this.cards.length; i++) {\n      let val = 0;\n      switch (this.cards[i].value) {\n        case \"A\":\n          val = 11;\n          numberOfA++;\n          break;\n        case \"J\":\n          val = 10;\n          break;\n        case \"Q\":\n          val = 10;\n          break;\n        case \"K\":\n          val = 10;\n          break;\n        default:\n          val = parseInt(this.cards[i].value);\n      }\n      score += val;\n    }\n    if (score > 21) {\n      while (score > 21 && numberOfA > 0) {\n        score = score - 10;\n        numberOfA--;\n      }\n    }\n    return score;\n  }\n  get playerName() {\n    return this.props.playerName;\n  }\n  get type() {\n    return this.props.type;\n  }\n  get status() {\n    return this.props.status;\n  }\n  get statusMessage() {\n    return this.props.statusMessage;\n  }\n  get currentPlayer() {\n    return this.props.currentPlayer;\n  }\n  set status(status) {\n    this.props.status = status;\n  }\n  set statusMessage(statusMessage) {\n    this.props.statusMessage = statusMessage;\n  }\n  set currentPlayer(currentPlayer) {\n    this.props.currentPlayer = currentPlayer;\n  }\n  //deal card to player hand\n  hit(card) {\n    this.cards.push(card);\n    this.statusMessage = this.determineStatusMessage();\n  }\n  stand() {\n    this.statusMessage = \"STAND\";\n    this.status = \"S\";\n  }\n  //determine status of player\n  determineStatusMessage() {\n    let score = this.score;\n    let newStatus;\n    if (score > 21) {\n      newStatus = \"LOSE! You bust.\";\n      this.status = \"L\";\n    } else if (score === 21) {\n      newStatus = \"WIN\";\n      this.status = \"W\";\n    } else if (score < 21 && this.cards.length >= 5) {\n      newStatus = \"WIN! You have 5 cards and less than 21 score\";\n      this.status = \"W\";\n    } else {\n      newStatus = \"0\";\n      this.status = \"P\";\n    }\n    return newStatus;\n  }\n}\nexport default function App() {\n  let [players, setPlayers] = useState([]);\n  let [dealer, setDealer] = useState(\"\");\n  let [status, setStatus] = useState(\"MENU\");\n  let [deck, setDeck] = useState(\"\");\n\n  useEffect(() => {\n    //If the dealers turn then deal to dealer\n    if (dealer.currentPlayer) {\n      playDealer();\n    }\n  }, [dealer.currentPlayer]);\n\n  useEffect(() => {\n    if (deck) {\n      if (deck.cards.length < 5) {\n        setDeck(addDeck(deck));\n      }\n    }\n  }, [deck]);\n\n  function drawCard() {\n    let newDeck = { ...deck };\n    let cardToReturn = newDeck.cards.pop();\n    setDeck(newDeck);\n    return cardToReturn;\n  }\n\n  function newGame(playerNames) {\n    //create deck\n    let deck = new Deck();\n\n    //Create players and dealer\n    let newPlayers = playerNames.map((playerName, index) => {\n      return new Player(playerName, \"P\", index);\n    });\n    let newDealer = new Player(\"Dealer\", \"D\", -1);\n\n    //deal initial cards\n    for (let i = 0; i < 2; i++) {\n      //deal 1 card to players\n      newPlayers.forEach((player) => {\n        //If running out of cards, add another deck\n        if (deck.cards.length < 5) {\n          deck = addDeck(deck);\n        }\n        player.hit(deck.cards.pop());\n      });\n      //then deal 1 card to dealer\n      newDealer.hit(deck.cards.pop());\n    }\n\n    //Check if first player is a winner\n    newPlayers[0].currentPlayer = true;\n    if (newPlayers[0].status === \"W\") {\n      let ret = nextPlayer(newPlayers[0].key + 1, newPlayers, newDealer);\n      newPlayers = ret.players;\n      newDealer = ret.dealer;\n    }\n    setPlayers(newPlayers);\n    setDealer(newDealer);\n    setStatus(\"NEW GAME\");\n    setDeck(deck);\n  }\n\n  function hitMe(player) {\n    player.hit(drawCard());\n    let newStatusMessage = player.statusMessage;\n    //If players turn is over, focus on next player\n    if (newStatusMessage !== \"0\") {\n      let ret = nextPlayer(player.key + 1, players, dealer);\n      setPlayers(ret.players);\n      setDealer(ret.dealer);\n    }\n  }\n  function stand(player) {\n    player.stand();\n    //focus on next player\n    let ret = nextPlayer(player.key + 1, players, dealer);\n    setPlayers(ret.players);\n    setDealer(ret.dealer);\n  }\n  function playDealer() {\n    let newDealer = dealer;\n    //pull out only those players whose state is STAND\n    let standingPlayers = players\n      .filter((player) => {\n        return player.statusMessage === \"STAND\";\n      })\n      .map((player) => {\n        return player;\n      });\n    if (standingPlayers.length !== 0) {\n      //dealer must play because at least one person is standing\n\n      //While dealer has less than 17, he MUST hit\n      while (newDealer.score < 17) {\n        dealer.hit(drawCard());\n      }\n      //Finally check each player above to see who wins\n      let newPlayers = [...players];\n      newPlayers.forEach((player) => {\n        //only check the standing players\n        if (player.statusMessage === \"STAND\") {\n          if (newDealer.score > 21) {\n            player.statusMessage = \"WIN! Dealer bust\";\n            player.status = \"W\";\n          } else if (player.score >= newDealer.score) {\n            player.statusMessage = \"WIN! You beat the dealer\";\n            player.status = \"W\";\n          } else {\n            player.statusMessage = \"Lose! The dealer has a higher score\";\n            player.status = \"L\";\n          }\n        }\n      });\n      setPlayers(newPlayers);\n      setDealer(newDealer);\n    }\n  }\n  function nextPlayer(nextPlayerId, pPlayers, pDealer) {\n    let newPlayers = [...pPlayers];\n    let newDealer = pDealer;\n    if (nextPlayerId === newPlayers.length) {\n      newPlayers.forEach((player) => {\n        player.currentPlayer = false;\n      });\n      newDealer.currentPlayer = true;\n    } else {\n      for (let i = 0; i < newPlayers.length; i++) {\n        if (newPlayers[i].key === nextPlayerId) {\n          if (newPlayers[i].status === \"W\") {\n            nextPlayer(nextPlayerId + 1, newPlayers, newDealer);\n            break;\n          } else {\n            newPlayers[i].currentPlayer = true;\n          }\n        } else {\n          newPlayers[i].currentPlayer = false;\n        }\n      }\n    }\n    return { players: newPlayers, dealer: newDealer };\n  }\n  function addDeck(pDeck) {\n    let newDeck = new Deck();\n    pDeck.cards.forEach((card) => {\n      newDeck.cards.push(card);\n    });\n\n    return newDeck;\n  }\n  function toMenu() {\n    setStatus(\"MENU\");\n  }\n  return (\n    <div className=\"App\">\n      {status === \"MENU\" ? (\n        <MainMenu onNewGame={newGame} players={players} />\n      ) : (\n        <div>\n          <Header\n            onClick={newGame}\n            onMenuClick={toMenu}\n            players={players.map((player) => {\n              return player.playerName;\n            })}\n          />\n          <div className=\"App-body\">\n            <table>\n              <tbody>\n                <PlayerSeat\n                  players={[dealer]}\n                  onHitMe={hitMe}\n                  onStand={stand}\n                />\n                <PlayerSeat players={players} onHitMe={hitMe} onStand={stand} />\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}