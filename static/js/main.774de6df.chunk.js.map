{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","onClick","onMenuClick","players","MainMenu","useState","playerNames","setPlayerNames","newPlayer","setNewPlayer","inputRef","React","createRef","addPlayerName","playerName","newPlayerNames","push","useEffect","current","focus","onNewGame","disabled","length","onsubmit","placeholder","onChange","event","target","value","ref","map","index","indexToRemove","filter","removePlayerName","generateDeck","Values","flatMap","suit","Card","setSuit","setValue","PlayerSeat","setPlayers","forEach","player","currentPlayer","document","getElementById","id","scrollIntoView","behavior","renderPlayers","labelClass","status","type","score","statusMessage","cards","card","onHitMe","onStand","tempPlayers","finalPlayers","Deck","this","i","size","newIndex","Math","floor","random","oldValue","Player","ret","numberOfA","val","parseInt","determineStatusMessage","newStatus","App","dealer","setDealer","setStatus","deck","setDeck","drawCard","cardToReturn","newDeck","pop","newGame","shuffle","newPlayers","newDealer","hit","console","log","nextPlayer","hitMe","stand","nextPlayerId","pPlayers","pDealer","playDealer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.774de6df.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport reactDOM from \"react-dom\";\n\nfunction Header(props) {\n  return (\n    <header className=\"App-header\">\n      <h1 className=\"heading game\">Blackjack</h1>\n      <h2 className=\"sub-heading game\">By Mehraan Ahmed Khan</h2>\n      <div>\n        <button className=\"menu-btn\" onClick={props.onMenuClick}>\n          Main menu\n        </button>\n        <button\n          className=\"menu-btn\"\n          onClick={() => props.onClick(props.players)}\n        >\n          New Round\n        </button>\n      </div>\n    </header>\n  );\n}\nfunction MainMenu(props) {\n  let [playerNames, setPlayerNames] = useState([\n    \"Billy\",\n    \"Lemmy\",\n    \"Andrew\",\n    \"Carla\",\n  ]);\n  let [newPlayer, setNewPlayer] = useState(\"\");\n  let inputRef = React.createRef();\n  let addBtnRef = React.createRef();\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, [newPlayer]);\n  function addPlayerName(playerName) {\n    let newPlayerNames = [...playerNames];\n    newPlayerNames.push(playerName);\n    setPlayerNames(newPlayerNames);\n    setNewPlayer(\"\");\n  }\n\n  function handleChange(event) {\n    setNewPlayer(event.target.value);\n  }\n  function removePlayerName(indexToRemove) {\n    let newPlayerNames = playerNames\n      .filter((playerName, index) => {\n        if (index !== indexToRemove) {\n          return playerName;\n        }\n      })\n      .map((playerName) => {\n        return playerName;\n      });\n    setPlayerNames(newPlayerNames);\n  }\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1 className=\"heading\">Blackjack</h1>\n        <h2 className=\"sub-heading\">By Mehraan Ahmed Khan</h2>\n        <button\n          className=\"start-btn\"\n          onClick={() => props.onNewGame(playerNames)}\n          disabled={playerNames.length === 0 ? true : false}\n        >\n          Start Game\n        </button>\n      </header>\n      <body>\n        <table className=\"main-menu\">\n          <tbody>\n            <tr>\n              <td>\n                <div className=\"add-player\">\n                  <form onsubmit={() => addPlayerName(newPlayer)}>\n                    <input\n                      placeholder=\"New player name\"\n                      onChange={handleChange}\n                      className=\"player-input\"\n                      value={newPlayer}\n                      ref={inputRef}\n                    />\n\n                    <button\n                      className=\"add-btn\"\n                      onClick={() => addPlayerName(newPlayer)}\n                      disabled={newPlayer ? false : true}\n                    >\n                      Add\n                    </button>\n                  </form>\n                </div>\n                <h6 className=\"list-heading\">Players</h6>\n                <ol className=\"player-list\">\n                  {playerNames.map((playerName, index) => {\n                    return (\n                      <li>\n                        {playerName}\n                        <button\n                          className=\"remove-btn\"\n                          onClick={() => {\n                            removePlayerName(index);\n                          }}\n                        >\n                          X\n                        </button>\n                      </li>\n                    );\n                  })}\n                </ol>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </body>\n    </div>\n  );\n}\n//generate deck of cards\nfunction generateDeck() {\n  const Suits = [\"♠\", \"♣\", \"♥\", \"♦\"];\n  const Values = [\n    \"A\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"J\",\n    \"Q\",\n    \"K\",\n  ];\n  return Suits.flatMap((suit) => {\n    return Values.map((value) => {\n      return { suit, value };\n    });\n  });\n}\nfunction Card(props) {\n  let [suit, setSuit] = useState(props.suit);\n  let [value, setValue] = useState(props.value);\n\n  //suit useEffect\n  useEffect(() => {\n    if (props.suit !== suit) {\n      setSuit(props.suit);\n    }\n  }, [props.suit]);\n  //value useEffect\n  useEffect(() => {\n    if (props.value !== value) {\n      setValue(props.value);\n    }\n  }, [props.value]);\n  return (\n    <div\n      className={\n        !suit || !value\n          ? \"card card-flipped\"\n          : suit === \"♥\" || suit === \"♦\"\n          ? \"card card-red\"\n          : \"card card-black\"\n      }\n    >\n      <table className=\"card-main-container\">\n        <tbody>\n          <tr className=\"card-top\">\n            <td>{value}</td>\n          </tr>\n          <tr className=\"card-middle\">\n            <td>{suit}</td>\n          </tr>\n          <tr className=\"card-bottom\">\n            <td>{value}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\nfunction PlayerSeat(props) {\n  let [players, setPlayers] = useState(props.players);\n  let focusElem = React.createRef();\n  //players useEffect\n  useEffect(() => {\n    if (props.players !== players) {\n      setPlayers(props.players);\n      props.players.forEach((player) => {\n        if (player.currentPlayer) {\n          document\n            .getElementById(`player-block-${player.id}`)\n            .scrollIntoView({ behavior: \"smooth\" });\n        }\n      });\n    }\n  }, [props.players]);\n\n  let renderPlayers = players.map((player, index) => {\n    let labelClass = \"\";\n    if (player.status === \"W\") labelClass = \"color-green\";\n    else if (player.status === \"S\") labelClass = \"color-yellow\";\n    else if (player.status === \"L\") labelClass = \"color-red\";\n\n    return (\n      <div id={`player-block-${player.id}`} className=\"player-block\">\n        <div className={player.currentPlayer ? \"hand current-player\" : \"hand\"}>\n          {player.type === \"D\" ? (\n            <div className=\"player-label\">\n              {player.playerName}\n              {!player.currentPlayer ? null : ` - ${player.score}`}\n            </div>\n          ) : (\n            <div className={`player-label ${labelClass}`}>\n              {player.playerName} - {player.score} -{\" \"}\n              {player.statusMessage === \"0\" ? \"Playing\" : player.statusMessage}\n            </div>\n          )}\n          <div className=\"card-container\">\n            {player.cards.map((card, index) => {\n              if (player.type === \"D\" && !player.currentPlayer && index === 1) {\n                return <Card />;\n              } else {\n                return <Card suit={card.suit} value={card.value} />;\n              }\n            })}\n          </div>\n        </div>\n        <div\n          className={\n            player.currentPlayer && player.type === \"P\" ? \"\" : \"hidden\"\n          }\n        >\n          <button\n            onClick={() => {\n              props.onHitMe(player);\n            }}\n          >\n            Hit me!\n          </button>\n          <button\n            onClick={() => {\n              props.onStand(player);\n            }}\n          >\n            Stand\n          </button>\n        </div>\n      </div>\n    );\n  });\n  let tempPlayers = [];\n  let finalPlayers = [];\n\n  renderPlayers.forEach((player, index) => {\n    tempPlayers.push(<td className=\"col-2\">{player}</td>);\n    //for every 2nd element\n    if ((index + 1) % 2 === 0 || index === renderPlayers.length - 1) {\n      finalPlayers.push(<tr className=\"player-row\">{tempPlayers}</tr>);\n      tempPlayers = [];\n    }\n  });\n  return finalPlayers;\n}\n\nclass Deck {\n  constructor(cards = generateDeck()) {\n    this.cards = cards;\n  }\n\n  get size() {\n    return this.cards.length;\n  }\n  shuffle() {\n    for (let i = this.size - 1; i > 0; i--) {\n      //get a random integer between 0 and i\n      const newIndex = Math.floor(Math.random() * (i + 1));\n      const oldValue = this.cards[newIndex];\n      this.cards[newIndex] = this.cards[i];\n      this.cards[i] = oldValue;\n    }\n  }\n}\nclass Player {\n  constructor(playerName, type, id) {\n    this.props = {\n      id: id,\n      playerName: playerName,\n      cards: [], //array of cards\n      type: type,\n      statusMessage: \"0\", //0 means game in progress\n      status: \"P\", //(P)rogress, (W)in, (L)ose\n      currentPlayer: false,\n    };\n  }\n  //getters\n  get id() {\n    return this.props.id;\n  }\n  get cards() {\n    return this.props.cards;\n  }\n  get cardsStr() {\n    let ret = \"\";\n    for (let i = 0; i < this.cards.length; i++) {\n      ret += `${this.cards[i].value} of ${this.cards[i].suit} | `;\n    }\n    return ret;\n  }\n  //score is derived\n  get score() {\n    let score = 0;\n    let numberOfA = 0;\n    for (let i = 0; i < this.cards.length; i++) {\n      let val = 0;\n      switch (this.cards[i].value) {\n        case \"A\":\n          val = 11;\n          numberOfA++;\n          break;\n        case \"J\":\n          val = 10;\n          break;\n        case \"Q\":\n          val = 10;\n          break;\n        case \"K\":\n          val = 10;\n          break;\n        default:\n          val = parseInt(this.cards[i].value);\n      }\n      score += val;\n    }\n    if (score > 21) {\n      while (score > 21 && numberOfA > 0) {\n        score = score - 10;\n        numberOfA--;\n      }\n    }\n    return score;\n  }\n  get playerName() {\n    return this.props.playerName;\n  }\n  get type() {\n    return this.props.type;\n  }\n  get status() {\n    return this.props.status;\n  }\n  get statusMessage() {\n    return this.props.statusMessage;\n  }\n  get currentPlayer() {\n    return this.props.currentPlayer;\n  }\n  set status(status) {\n    this.props.status = status;\n  }\n  set statusMessage(statusMessage) {\n    this.props.statusMessage = statusMessage;\n  }\n  set currentPlayer(currentPlayer) {\n    this.props.currentPlayer = currentPlayer;\n  }\n  //deal card to player hand\n  hit(card) {\n    this.cards.push(card);\n    this.statusMessage = this.determineStatusMessage();\n  }\n  stand() {\n    this.statusMessage = \"STAND\";\n    this.status = \"S\";\n  }\n  //determine state of player\n  determineStatusMessage() {\n    let score = this.score;\n    let newStatus;\n    if (score > 21) {\n      newStatus = \"LOSE! You bust.\";\n      this.status = \"L\";\n    } else if (score === 21) {\n      newStatus = \"WIN\";\n      this.status = \"W\";\n    } else if (score < 21 && this.cards.length >= 5) {\n      newStatus = \"WIN! You have 5 cards and less than 21 score\";\n      this.status = \"W\";\n    } else {\n      newStatus = \"0\";\n      this.status = \"P\";\n    }\n    return newStatus;\n  }\n}\nexport default function App() {\n  let [players, setPlayers] = useState([]);\n  let [dealer, setDealer] = useState(\"\");\n  let [status, setStatus] = useState(\"MENU\");\n  let [deck, setDeck] = useState(\"\");\n\n  useEffect(() => {\n    if (dealer.currentPlayer) {\n      playDealer();\n    }\n  }, [dealer.currentPlayer]);\n\n  function noOfPlayers() {\n    return players.length;\n  }\n  function drawCard() {\n    let cardToReturn;\n    let newDeck = { ...deck };\n    cardToReturn = newDeck.cards.pop();\n    setDeck(newDeck);\n    return cardToReturn;\n  }\n\n  function newGame(playerNames) {\n    //create and shuffle\n    let deck = new Deck();\n    deck.shuffle();\n\n    //Create player profiles - map new player objects to the players array\n    let newPlayers = [];\n    if (playerNames) {\n      newPlayers = playerNames.map((playerName, index) => {\n        return new Player(playerName, \"P\", index);\n      });\n    } else {\n      let newPlayerNames = players.map((player) => {\n        return player.playerName;\n      });\n      newPlayers = newPlayerNames.map((playerName, index) => {\n        return new Player(playerName, \"P\", index);\n      });\n    }\n    let newDealer = new Player(\"Dealer\", \"D\", -1);\n\n    //deal initial\n\n    for (let i = 0; i < 2; i++) {\n      //deal 1 card to players\n      newPlayers.forEach((player) => {\n        player.hit(deck.cards.pop());\n      });\n      //then deal 1 card to dealer\n      newDealer.hit(deck.cards.pop());\n    }\n\n    newPlayers[0].currentPlayer = true;\n    if (newPlayers[0].status === \"W\") {\n      console.log(\"changing player\", newPlayers[0].status, newPlayers[0]);\n      let ret = nextPlayer(newPlayers[0].id + 1, newPlayers, newDealer);\n      newPlayers = ret.players;\n      newDealer = ret.dealer;\n    }\n    setPlayers(newPlayers);\n    setDealer(newDealer);\n    setStatus(\"NEW GAME\");\n    setDeck(deck);\n  }\n\n  function hitMe(player) {\n    player.hit(drawCard());\n    let newStatusMessage = player.statusMessage;\n    if (newStatusMessage !== \"0\") {\n      let ret = nextPlayer(player.id + 1, players, dealer);\n      setPlayers(ret.players);\n      setDealer(ret.dealer);\n    }\n  }\n  function stand(player) {\n    player.stand();\n\n    let ret = nextPlayer(player.id + 1, players, dealer);\n    setPlayers(ret.players);\n    setDealer(ret.dealer);\n  }\n  function playDealer() {\n    let newDealer = dealer;\n    //pull out only those players whose state is STAND\n    let standingPlayers = players\n      .filter((player) => {\n        return player.statusMessage === \"STAND\";\n      })\n      .map((player) => {\n        return player;\n      });\n    if (standingPlayers.length !== 0) {\n      //dealer must play because at least one person is standing\n\n      //While dealer has less than 17, he MUST hit\n      while (newDealer.score < 17) {\n        dealer.hit(drawCard());\n      }\n      //Finally check each player above to see who wins\n      let newPlayers = [...players];\n      newPlayers.forEach((player) => {\n        //only check the standing players\n        if (player.statusMessage === \"STAND\") {\n          if (newDealer.score > 21) {\n            player.statusMessage = \"WIN! Dealer bust\";\n            player.status = \"W\";\n          } else if (player.score >= newDealer.score) {\n            player.statusMessage = \"WIN! You beat the dealer\";\n            player.status = \"W\";\n          } else {\n            player.statusMessage = \"Lose! The dealer has a higher score\";\n            player.status = \"L\";\n          }\n        }\n      });\n      setPlayers(newPlayers);\n      setDealer(newDealer);\n    }\n  }\n  function nextPlayer(nextPlayerId, pPlayers, pDealer) {\n    let newPlayers = [...pPlayers];\n    let newDealer = pDealer;\n    if (nextPlayerId === newPlayers.length) {\n      newPlayers.forEach((player) => {\n        player.currentPlayer = false;\n      });\n      newDealer.currentPlayer = true;\n      // setDealer(newDealer);\n    } else {\n      for (let i = 0; i < newPlayers.length; i++) {\n        if (newPlayers[i].id === nextPlayerId) {\n          if (newPlayers[i].status === \"W\") {\n            nextPlayer(nextPlayerId + 1, newPlayers, newDealer);\n            break;\n          } else {\n            newPlayers[i].currentPlayer = true;\n          }\n        } else {\n          newPlayers[i].currentPlayer = false;\n        }\n      }\n    }\n    return { players: newPlayers, dealer: newDealer };\n  }\n  function toMenu() {\n    setStatus(\"MENU\");\n  }\n  return (\n    <div className=\"App\">\n      {status === \"MENU\" ? (\n        <MainMenu onNewGame={newGame} />\n      ) : (\n        <div>\n          <Header\n            onClick={newGame}\n            onMenuClick={toMenu}\n            players={players.map((player) => {\n              return player.playerName;\n            })}\n          />\n          <div className=\"App-body\">\n            <table>\n              <tbody>\n                <PlayerSeat\n                  players={[dealer]}\n                  onHitMe={hitMe}\n                  onStand={stand}\n                />\n                <PlayerSeat players={players} onHitMe={hitMe} onStand={stand} />\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}